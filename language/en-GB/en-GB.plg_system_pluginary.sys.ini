
PLG_SYSTEM_PLUGINARY="System - PluginAry"
PLG_SYSTEM_PLUGINARY_XML_DESCRIPTION="<img src='../plugins/system/pluginary/images/logo.png' align='left' style='margin:  0; padding: 0; ' />\n\nCreate a plugin snippet on the fly\n<br/>\n<br/>\nThe plugin generates "itself" (dynamic plugin code) based on it's settings or/and properly placed custom files. The plugin is useful, when you need some custom behavior which can be implemented via a plugin, but it's not worth of creating a full joomla plugin with all routine job to be done in this case. E.g. you want to send a email if a a user with a certain user name performs login. In this plugin you can select joomla method onUserAfterLogin and paste a small php code snippet checking the user name and sending email (ask the developer if you need exactly the described example code).\n<h3>PHP code area</h3>\nEnter PHP code of the plugin method (joomla event).\n<br>Use only method body code, not the method declaration. E.g. if a function in a manually written plugin looks like\n<pre>\npublic function onAfterRoute()\n{\n	$text = 'My text';\n	/* Some other code */\n	/* And more code */\n}\n</pre>\nto use PluginAry in a similar way you must select the appropriate method in the plugin settings and place only the following part into the php code textarea\n<pre>\n	$text = 'My text';\n	/* Some other code */\n	/* And more code */\n</pre>\n\n<h3>Getting passed vairables</h3>\n\nSince we use a general way to generate a dynamic plugin with custom methods, we use a general way to get the variables passed into the methods. The plugin prepends all the custom code with <code>$arg_list = func_get_args();</code>, so you can find the arguments passed to the method in <b>$arg_list</b> array.<br/>\nTo be clear, PluginAry generates dynamic code like this\n<pre>onContentPrepare()\n{\n	$arg_list = func_get_args();\n\n	/* your custom code from the right textarea here */\n}\n</pre>\n\n<br><b>Example:</b> A regular plugin method declaration looks like <pre>onContentPrepare($context, &$article, &$params, $page = 0)</pre>\nSo if creating a method for this event in PluginAry, you can get the similar variables like this\n<pre>\n$context = $arg_list[0];\n$article = $arg_list[1];\n$params = $arg_list[2];\n\nif (isset($arg_list[3]))\n{\n	$page = $arg_list[3];\n}\nelse\n{\n	$page = 0;\n}\n// do what you need as in a regular plugin\n</pre>\n\n<h3>Using files to store your code</h3>\nIt may be tiresome to edit the PHP code here in the plugin settings and save the plugin each time to run a test. Especially when you develop some snippet and need many tests.<br />\nA good practice in this case is to create a file and to place if following the convention:<b>templates/YOURTEMPLATE/html/plugin/onContentPrepare.php</b>\n<br/>\nThe plugin looks for all files in <b>templates/YOURTEMPLATE/html/plugin/</b> and includes them as appropriate plugin methods. Note the file name - it should be exactly the same, as the plugin method you want to call.\n<br>Such a file content should look like:\n<pre>\n&lt;?php\ndefined('_JEXEC') or die('Restricted access');\n\n/* Your code here */\n</pre>\n"
